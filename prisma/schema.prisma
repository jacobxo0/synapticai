// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String    @unique
  emailVerified         DateTime?
  image                 String?
  isOnboarded           Boolean   @default(false)
  onboardingCompletedAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accounts              Account[]
  sessions              Session[]
  todos                 Todo[]
  goals                 Goal[]
  conversations         Conversation[]
  messages              Message[]
  moodLogs              MoodLog[]
  userConsents          UserConsent[]
  memories              Memory[]
  journalEntries        JournalEntry[]
  tonePreferences       TonePreference[]
  reflections           Reflection[]
  coachingSessions      CoachingSession[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          String    @id @default(cuid())
  title       String
  description String?
  status      String    @default("NOT_STARTED")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String    @id @default(cuid())
  title     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
}

model Message {
  id             String       @id @default(cuid())
  content        String
  role           String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MoodLog {
  id            String         @id @default(cuid())
  mood          String
  note          String?
  createdAt     DateTime       @default(now())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  journalEntry  JournalEntry[]
}

model UserConsent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        String
  enabled     Boolean  @default(true)
  lastUpdated DateTime @default(now())
}

model SessionConsent {
  id          String   @id @default(cuid())
  sessionId   String
  type        String
  enabled     Boolean  @default(true)
  lastUpdated DateTime @default(now())
}

model Memory {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  type      String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  mood      MoodLog? @relation(fields: [moodId], references: [id])
  moodId    String?
  tone      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromptTemplate {
  id        String   @id @default(cuid())
  title     String
  content   String
  type      String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TestResult {
  id          String   @id @default(cuid())
  name        String
  status      String
  output      String?
  error       String?
  duration    Int
  createdAt   DateTime @default(now())
  testReport  TestReport? @relation(fields: [reportId], references: [id])
  reportId    String?
}

model TestReport {
  id          String   @id @default(cuid())
  name        String
  status      String
  summary     String?
  results     TestResult[]
  createdAt   DateTime @default(now())
}

model TonePreference {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tone      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reflection {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoachingSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  notes     String?
  status    String
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
